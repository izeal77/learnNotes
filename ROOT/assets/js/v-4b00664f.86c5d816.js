"use strict";(self.webpackChunkvuepress_test01=self.webpackChunkvuepress_test01||[]).push([[796],{8403:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4b00664f",path:"/foundation/webpack.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"webpack",slug:"webpack",children:[]}],filePathRelative:"foundation/webpack.md",git:{updatedTime:1634984517e3,contributors:[{name:"izeal77",email:"243313724@qq.com",commits:1}]}}},1712:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h3 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h3><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1.概念</h4><p>静态模块打包工具</p><p>模块化：webpack可以让我们进行模块化开发，自动处理相关依赖关系，</p><p>打包：文件压缩合并、预处理等功能</p><p>和grunt、gulp区别：</p><p>前者更强调流程的自动化，定义一些任务等，核心不是模块化</p><p>后者更强调模块化的开发管理</p><h4 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2.使用</h4><p>以webpack打包commonJS为例，先在各个模块写代码，使用commonJS的module.export{}和const xxx = require(&#39;xxx.js&#39;)各自依赖，最后用webpack打包好，在index.html中引用这个打包好的文件</p><p>只需要打包入口文件，会自动处理相关依赖；</p><p><code>webpack ./src/main.js ./dist/bundle.js</code>对应的是入口文件和打包后存放的地方</p><h4 id="_3-详解" tabindex="-1"><a class="header-anchor" href="#_3-详解" aria-hidden="true">#</a> 3.详解</h4><p>模块化：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 导出</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  add<span class="token punctuation">,</span>\n  mul\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导入</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> mul <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./mathUtils&#39;</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h5 id="webpack配置" tabindex="-1"><a class="header-anchor" href="#webpack配置" aria-hidden="true">#</a> webpack配置</h5><p>1.创建webpack.config.js并写入入口和出口</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>2.npm init -y初始化webpack，即可使用webpack快捷打包</p><p>3.将webpack映射到npm run build(优先执行本地webpack)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="加载样式" tabindex="-1"><a class="header-anchor" href="#加载样式" aria-hidden="true">#</a> 加载样式</h5><p>loader使用过程：</p><p>步骤一：通过npm安装需要使用的loader</p><p>需要npmloader：css-loader和style-loader</p><p>css-loader负责加载css文件，不负责将css嵌入文档中</p><p>style-loader负责将样式添加到DOM中</p><p>步骤二：在webpack.config.js中的modules关键字下进行配置</p><p>步骤三：在main.js中引用css文件</p><p><strong>加载图片</strong></p><p>对于使用url的图片，会存在打包后访问不到的问题，可以去webpack.config.js中加上：publicPath:&#39;dist/&#39;，因为打包后的路径相对于之前改变了</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 修改打包后的图片名字</span>\n<span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token operator">:</span> <span class="token string">&#39;file-loader&#39;</span><span class="token punctuation">,</span>\n            options<span class="token operator">:</span> <span class="token punctuation">{</span>\n              name<span class="token operator">:</span> <span class="token string">&#39;img/[name].[hash:8].[ext]&#39;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>es6=&gt;es5</strong></p><p>在webpack中，我们直接使用babel对应的loader就可以了</p><p>安装npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</p><p>配置webpack.config.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">{</span>\n          loader<span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n          options<span class="token operator">:</span> <span class="token punctuation">{</span>\n            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;es2015&#39;</span><span class="token punctuation">]</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>配置Vue</strong></p><p>几个问题：</p><p>使用runtime-only版本的vue，会报错，修改webpack的配置</p><p>el和template模板的关系是什么呢？</p><p>el用于指定Vue要管理的DOM，可以帮助解析其中的指令、事件监听等等。</p><p>而如果Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板。</p><p>webpack打包vue的时候会报错，需要安装vue-loader和vue-template-compiler，并且修改webpack.config.js文件。并且把vue-loader版本改为：&quot;vue-loader&quot;: &quot;^13.0.0&quot;,</p><h5 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> plugin</h5><p>loader主要用于转换某些类型的模型，是一个转换器</p><p>plugin是插件，是对webpack本身的扩展，是一个扩展器</p>',47),e={render:function(n,s){return p}}}}]);